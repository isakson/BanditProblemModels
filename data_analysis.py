'''
Computational Models of Cognition
Final Project
11/14/18

Functions for analyzing Lee et al. (2011) bandit data and model data generated by Win-stay, lose-
shift, Epsilon-greedy, Epsilon-decreasing, Pi-first, and Tau-switch models.
'''
import numpy as np
import os
import tau_switch
import epsilon_heuristics
import pi_first
import win_stay_lose_shift

def average_wins_per_person(data):
    '''
    Parameters:
        data: an numpy array of result data, where each row is one game played by the 
        same person/model
        
    Returns: the average win rate of a single person/model over all their games
    '''
    averages = data.mean(axis=1)
    return averages.mean()


def average_wins_by_third(data, third):
    '''
    Parameters:
        data: an numpy array of result data, where each row is one game played by the same person/model
        third: 0 for the first third of trials, 1 for second third of trials, 2 for last 
        third of trials
    Returns: the average win rate of a single person/model in the specified third of each 
    game's trials over all their games
    '''
    #Use integer division to define a start trial and end trial for the specified third of trials
    if third == 0:
        start = 0
        end = len(data[0] - 1) // 3
    elif third == 1:
        start = len(data[0] - 1) // 3
        end = 2 * len(data[0] - 1) // 3
    else:
        start = 2 * len(data[0] - 1) // 3
        end = len(data[0] - 1)  
        
    #Select the third of data we want
    third_of_data = data[:, start:end]
    
    averages = third_of_data.mean(axis=1)
    return averages.mean()


def arm_counts(data, arm_nums):
    '''
    Parameters:
        data: an numpy array of choice data, where each row is one game played by the same person/model
        arm_nums = a list with the arms' possible numbers (to indicate if they start at 0 or 1)
    Returns: list of the average number of times per game that an arm is chosen
    '''
    arm_frequencies = []
    for i in range(len(arm_nums)): 
        arm_frequency = []
        for j in range(len(data)):
            #Count the occurences of the arm in each row/game
            arm_frequency.append((data[j] == arm_nums[i]).sum())
        arm_frequencies.append(arm_frequency)
       
    #Average the number of times each arm is chosen across all games in the file
    averages = []
    for i in range(len(arm_frequencies)):
        avg_frequency = sum(arm_frequencies[i]) / len(arm_frequencies[i])
        averages.append(avg_frequency)
    
    return averages


def arm_counts_by_thirds(data, arm_nums, third):
    '''
    Parameters:
        data: an np array of choice data, where each row is one game played by the same person/model
        arm_nums: a list with the arm's numbers (to indicate if they start at 0 or 1)
        third: 0 for first third, 1 for second third, 2 for last third
    Returns: a list of the average number of times over all games that an arm is chosen in the given third of trials of each game
    '''
    #Use integer division to define a start trial and end trial for the specified third of trials
    if third == 0:
        start = 0
        end = len(data[0] - 1) // 3
    elif third == 1:
        start = len(data[0] - 1) // 3
        end = 2 * len(data[0] - 1) // 3
    else:
        start = 2 * len(data[0] - 1) // 3
        end = len(data[0] - 1)
        
    third_of_data = data[:, start:end]
        
    arm_frequencies = []
    for i in range(len(arm_nums)): 
        arm_frequency = []
        for j in range(len(third_of_data)):
            #Count the occurences of the arm in each row/game
            arm_frequency.append((third_of_data[j] == arm_nums[i]).sum())
        arm_frequencies.append(arm_frequency)
         
    #Average the occurances of each arm
    averages = []
    for i in range(len(arm_frequencies)):
        avg_frequency = sum(arm_frequencies[i]) / len(arm_frequencies[i])
        averages.append(avg_frequency)
    
    return averages


def analyze_model_data(model):
    '''
    Generates a text file with averages and arm frequencies for provided data
    Parameteres:
        model: the model to analyze
    '''
    #Identify the path to the model's data and choose file title
    if model == "WSLS":
        path = "./ModelData/WSLS"
        file_title = "WSLSAverages"
    elif model == "epsilon_greedy":
        path = "./ModelData/EpsilonGreedy"
        file_title = "epsilonGreedyAverages"
    elif model == "epsilon_decreasing":
        path = "./ModelData/EpsilonDecreasing"
        file_title = "epsilonDecreasingAverages"
    elif model == "pi_first":
        path = "./ModelData/PiFirst"
        file_title = "piFirstAverages"
    else:
        path = "./ModelData/TauSwitch"
        file_title = "tauSwitchAverages"

    averages_file = open("./ModelData/ModelAverages/" + file_title + ".txt", "w")
    
    #Sort files in the directory of data alphabetically before they are analyzed
    files = os.listdir(path)
    files.sort()
    
    #Iterate through files in directory
    for filename in files:
        #Exclude Mac dot files when iterating through the directory
        if ".DS" not in filename:
            #Scrape the data from the CSVs
            file = os.fsdecode(filename)
            csv = np.genfromtxt(path + "/" + file, delimiter=',')
            
            #Take off header of files
            csv = csv[1:]
            
            #Find average win rates of results data
            if "Results" in filename:
                average_wins = average_wins_per_person(csv)
                average_wins_first_third =  average_wins_by_third(csv, 0)
                average_wins_second_third =  average_wins_by_third(csv, 1)
                average_wins_third_third =  average_wins_by_third(csv, 2)

                #Write data to file
                averages_file.write(filename + "\n\n")
                averages_file.write("Average_wins: " + str(average_wins) +"\n")
                averages_file.write("Average_wins first third : " + str(average_wins_first_third )+"\n")
                averages_file.write("average wins second third: " + str(average_wins_second_third)+"\n")
                averages_file.write("average wins  last third: " + str(average_wins_third_third)+"\n" + "\n")
            else:
                #Compute arm counts
                arm_counts_arr = arm_counts(csv, [0,1])
                arm_counts_first_third =  arm_counts_by_thirds(csv, [0,1], 0)
                arm_counts_second_third =  arm_counts_by_thirds(csv, [0,1], 1)
                arm_counts_third_third=  arm_counts_by_thirds(csv, [0,1], 2)

                #Write data to file
                averages_file.write(filename + "\n\n")
                averages_file.write("Arm counts: " + str(arm_counts_arr)+"\n")
                averages_file.write("Arm 0 percent: " + str(arm_counts_arr[0]/sum(arm_counts_arr))+"\n")
                averages_file.write("Arm counts first third: " + str(arm_counts_first_third)+"\n")
                averages_file.write("Arm 0 first third percent: " + str(arm_counts_first_third[0]/sum(arm_counts_first_third))+"\n")
                averages_file.write("Arm counts second third: " + str(arm_counts_second_third)+"\n")
                averages_file.write("Arm 0 second third percent: " + str(arm_counts_second_third[0]/sum(arm_counts_second_third))+"\n")
                averages_file.write("Arm counts last third: " + str(arm_counts_third_third)+"\n")
                averages_file.write("Arm 0 last third percent: " + str(arm_counts_third_third[0]/sum(arm_counts_third_third))+"\n\n")

                
def analyze_all_models():
    '''
    Analyzes model data for all five heuristic models used in the experiment.
    '''
    analyze_model_data("WSLS")
    analyze_model_data("epsilon_greedy")
    analyze_model_data("epsilon_decreasing")
    analyze_model_data("pi_first")
    analyze_model_data("tau_switch")
    
def analyze_Lee_data():
    '''
    Analyzes Lee et al. (2011) data and writes the data on results, choices, and averages 
    in text files.
    '''

    #Open files
    results_file = open('results_data.txt', "w")
    choices_file = open('choices_data.txt', "w")
    averages_file = open('averages.txt', "w")

    #Analyze result data
    
    #Initialize arrays for data
    neutral_all = [[], []]
    neutral_first =[[], []]
    neutral_second = [[], []]
    neutral_third = [[], []]

    sparse_all = [[], []]
    sparse_first = [[], []]
    sparse_second = [[], []]
    sparse_third = [[], []]

    plentiful_all = [[], []]
    plentiful_first = [[], []]
    plentiful_second = [[], []]
    plentiful_third = [[], []]

    #Iterate through data files and compute average wins over full games and in thirds
    for filename in os.listdir("./LeeCSV/Results"):
        file = os.fsdecode(filename)
        results_file.write(file + "\n\n")
        path = "./LeeCSV/Results/" + file
        #Generate data from each CSV
        csv = np.genfromtxt(path, delimiter=',')
        
        #Compute averages
        average_wins = average_wins_per_person(csv)
        average_wins_first_third =  average_wins_by_third(csv, 0)
        average_wins_second_third =  average_wins_by_third(csv, 1)
        average_wins_third_third =  average_wins_by_third(csv, 2)

        #Write data to file
        results_file.write("Average wins: " + str(average_wins) +"\n")
        results_file.write("Average wins first third : " + str(average_wins_first_third )+"\n")
        results_file.write("Average wins second third: " + str(average_wins_second_third)+"\n")
        results_file.write("Average wins last third: " + str(average_wins_third_third)+"\n" + "\n")

        #Append data to corresponding lists to calculate environment averages

        #Neutral environment trials 
        if "A1-B1" in file and "16" in file:
            neutral_all[1].append(average_wins)
            neutral_first[1].append(average_wins_first_third)
            neutral_second[1].append(average_wins_second_third)
            neutral_third[1].append(average_wins_third_third)
        elif "A1-B1" in file and "8" in file:
            neutral_all[0].append(average_wins)
            neutral_first[0].append(average_wins_first_third)
            neutral_second[0].append(average_wins_second_third)
            neutral_third[0].append(average_wins_third_third)

        #Sparse environment trials
        elif "A2-B4" in file and "16" in file:
            sparse_all[1].append(average_wins)
            sparse_first[1].append(average_wins_first_third)
            sparse_second[1].append(average_wins_second_third)
            sparse_third[1].append(average_wins_third_third)
        elif "A2-B4" in file and "8" in file:
            sparse_all[0].append(average_wins)
            sparse_first[0].append(average_wins_first_third)
            sparse_second[0].append(average_wins_second_third)
            sparse_third[0].append(average_wins_third_third)
            
        #Plentiful environment trials
        elif "A4-B2" in file and "16" in file:
            plentiful_all[1].append(average_wins)
            plentiful_first[1].append(average_wins_first_third)
            plentiful_second[1].append(average_wins_second_third)
            plentiful_third[1].append(average_wins_third_third)
        else:
            plentiful_all[0].append(average_wins)
            plentiful_first[0].append(average_wins_first_third)
            plentiful_second[0].append(average_wins_second_third)
            plentiful_third[0].append(average_wins_third_third)

    #Average across participants and write to file

    neutral_average_8 = sum(neutral_all[0])/len(neutral_all[0])
    neutral_average_16 = sum(neutral_all[1])/len(neutral_all[1])
    sparse_average_8 = sum(sparse_all[0])/len(sparse_all[0])
    sparse_average_16 = sum(sparse_all[1])/len(sparse_all[1])
    plentiful_average_8 = sum(plentiful_all[0])/len(plentiful_all[0])
    plentiful_average_16 = sum(plentiful_all[1])/len(plentiful_all[1])

    neutral_first_average_8 = sum(neutral_first[0])/len(neutral_first[0])
    neutral_first_average_16 = sum(neutral_first[1])/len(neutral_first[1])
    sparse_first_average_8 = sum(sparse_first[0])/len(sparse_first[0])
    sparse_first_average_16 = sum(sparse_first[1])/len(sparse_first[1])
    plentiful_first_average_8 = sum(plentiful_first[0])/len(plentiful_first[0])
    plentiful_first_average_16 = sum(plentiful_first[1])/len(plentiful_first[1])

    neutral_second_average_8 = sum(neutral_second[0])/len(neutral_second[0])
    neutral_second_average_16 = sum(neutral_second[1])/len(neutral_second[1])
    sparse_second_average_8 = sum(sparse_second[0])/len(sparse_second[0])
    sparse_second_average_16 = sum(sparse_second[1])/len(sparse_second[1])
    plentiful_second_average_8 = sum(plentiful_second[0])/len(plentiful_second[0])
    plentiful_second_average_16 = sum(plentiful_second[1])/len(plentiful_second[1])

    neutral_third_average_8 = sum(neutral_third[0])/len(neutral_third[0])
    neutral_third_average_16 = sum(neutral_third[1])/len(neutral_third[1])
    sparse_third_average_8 = sum(sparse_third[0])/len(sparse_third[0])
    sparse_third_average_16 = sum(sparse_third[1])/len(sparse_third[1])
    plentiful_third_average_8 = sum(plentiful_third[0])/len(plentiful_third[0])
    plentiful_third_average_16 = sum(plentiful_third[1])/len(plentiful_third[1])

    averages_file.write('Total Averages' + "\n"+ "\n")
    averages_file.write("Neutral average wins 8: " + str(neutral_average_8) +"\n")
    averages_file.write("Neutral average wins 16: " + str(neutral_average_16) +"\n")
    averages_file.write("Sparse average wins 8: " + str(sparse_average_8) +"\n")
    averages_file.write("Sparse average wins 16: " + str(sparse_average_16) +"\n")
    averages_file.write("Plentiful average wins 8: " + str(plentiful_average_8) +"\n")
    averages_file.write("Plentiful average wins 16: " + str(plentiful_average_16) +"\n"+"\n")

    averages_file.write('First Third Averages' + "\n"+ "\n")
    averages_file.write("Neutral average wins 8: " + str(neutral_first_average_8) +"\n")
    averages_file.write("Neutral average wins 16: " + str(neutral_first_average_16) +"\n")
    averages_file.write("Sparse average wins 8: " + str(sparse_first_average_8) +"\n")
    averages_file.write("Sparse average wins 16: " + str(sparse_first_average_16) +"\n")
    averages_file.write("Plentiful average wins 8: " + str(plentiful_first_average_8) +"\n")
    averages_file.write("Plentiful average wins 16: " + str(plentiful_first_average_16) +"\n"+"\n")

    averages_file.write('Second Third Averages' + "\n"+ "\n")
    averages_file.write("Neutral average wins 8: " + str(neutral_second_average_8) +"\n")
    averages_file.write("Neutral average wins 16: " + str(neutral_second_average_16) +"\n")
    averages_file.write("Sparse average wins 8: " + str(sparse_second_average_8) +"\n")
    averages_file.write("Sparse average wins 16: " + str(sparse_second_average_16) +"\n")
    averages_file.write("Plentiful average wins 8: " + str(plentiful_second_average_8) +"\n")
    averages_file.write("Plentiful average wins 16: " + str(plentiful_second_average_16) +"\n"+"\n")

    averages_file.write('Last third Averages' + "\n"+ "\n")
    averages_file.write("Neutral average wins 8: " + str(neutral_third_average_8) +"\n")
    averages_file.write("Neutral average wins 16: " + str(neutral_third_average_16) +"\n")
    averages_file.write("Sparse average wins 8: " + str(sparse_third_average_8) +"\n")
    averages_file.write("Sparse average wins 16: " + str(sparse_third_average_16) +"\n")
    averages_file.write("Plentiful average wins 8: " + str(plentiful_third_average_8) +"\n")
    averages_file.write("Plentiful average wins 16: " + str(plentiful_third_average_16) +"\n"+"\n")

    #Analyze choice data
    
    #Initialize arrays for average arm counts: index 0 is arm 1; index 1 is arm 2
    neutral_8_total_counts = [0,0]
    neutral_16_total_counts = [0,0]
    sparse_8_total_counts = [0,0]
    sparse_16_total_counts = [0,0]
    plentiful_8_total_counts = [0,0]
    plentiful_16_total_counts = [0,0]

    neutral_8_first_counts = [0,0]
    neutral_16_first_counts = [0,0]
    sparse_8_first_counts = [0,0]
    sparse_16_first_counts = [0,0]
    plentiful_8_first_counts = [0,0]
    plentiful_16_first_counts = [0,0]

    neutral_8_second_counts = [0,0]
    neutral_16_second_counts = [0,0]
    sparse_8_second_counts = [0,0]
    sparse_16_second_counts = [0,0]
    plentiful_8_second_counts = [0,0]
    plentiful_16_second_counts = [0,0]

    neutral_8_third_counts = [0,0]
    neutral_16_third_counts = [0,0]
    sparse_8_third_counts = [0,0]
    sparse_16_third_counts = [0,0]
    plentiful_8_third_counts = [0,0]
    plentiful_16_third_counts = [0,0]

    #Iterate over choice data and compute average frequencies of choosing each arm
    for filename in os.listdir("./LeeCSV/Choices"):
        file = os.fsdecode(filename)
        choices_file.write(file + "\n" + "\n")
        path = "./LeeCSV/Choices/" + file
        csv = np.genfromtxt(path, delimiter=',')
        
        #Compute arm counts
        arm_counts_arr = arm_counts(csv, [1,2])
        arm_counts_first_third =  arm_counts_by_thirds(csv, [1,2], 0)
        arm_counts_second_third =  arm_counts_by_thirds(csv, [1,2], 1)
        arm_counts_third_third=  arm_counts_by_thirds(csv, [1,2], 2)
        
        #Write data to file
        choices_file.write(" Armcounts: " + str(arm_counts_arr)+"\n")
        choices_file.write(" Arm1 percentage: " + str(arm_counts_arr[0]/sum(arm_counts_arr))+"\n")
        choices_file.write(" Armcounts first third: " + str(arm_counts_first_third)+"\n")
        choices_file.write(" Arm1 percentage first third: " + str(arm_counts_first_third[0]/sum(arm_counts_first_third))+"\n")
        choices_file.write(" Armcounts second third: " + str(arm_counts_second_third)+"\n")
        choices_file.write(" Arm1 percentage second third: " + str(arm_counts_second_third[0]/sum(arm_counts_second_third))+"\n")
        choices_file.write(" Armcounts last third: " + str(arm_counts_third_third)+"\n")
        choices_file.write(" Arm1 percentage last third: " + str(arm_counts_third_third[0]/sum(arm_counts_third_third))+"\n" + "\n")

        #Accumulate arm counts in each game type and environment
        #Neutral environment trials 
        if "A1-B1" in file and "16" in file:
            neutral_16_total_counts[0] += arm_counts_arr[0]
            neutral_16_first_counts[0] += arm_counts_first_third[0]
            neutral_16_second_counts[0] += arm_counts_second_third[0]
            neutral_16_third_counts[0] += arm_counts_third_third[0]
            neutral_16_total_counts[1] += arm_counts_arr[1]
            neutral_16_first_counts[1] += arm_counts_first_third[1]
            neutral_16_second_counts[1] += arm_counts_second_third[1]
            neutral_16_third_counts[1] += arm_counts_third_third[1]
        elif "A1-B1" in file and "8" in file:
            neutral_8_total_counts[0] += arm_counts_arr[0]
            neutral_8_first_counts[0] += arm_counts_first_third[0]
            neutral_8_second_counts[0] += arm_counts_second_third[0]
            neutral_8_third_counts[0] += arm_counts_third_third[0]
            neutral_8_total_counts[1] += arm_counts_arr[1]
            neutral_8_first_counts[1] += arm_counts_first_third[1]
            neutral_8_second_counts[1] += arm_counts_second_third[1]
            neutral_8_third_counts[1] += arm_counts_third_third[1]
            
        #Sparse environment trials
        elif "A2-B4" in file and "16" in file:
            sparse_16_total_counts[0] += arm_counts_arr[0]
            sparse_16_first_counts[0] += arm_counts_first_third[0]
            sparse_16_second_counts[0] += arm_counts_second_third[0]
            sparse_16_third_counts[0] += arm_counts_third_third[0]
            sparse_16_total_counts[1] += arm_counts_arr[1]
            sparse_16_first_counts[1] += arm_counts_first_third[1]
            sparse_16_second_counts[1] += arm_counts_second_third[1]
            sparse_16_third_counts[1] += arm_counts_third_third[1]
        elif "A2-B4" in file and "8" in file:
            sparse_8_total_counts[0] += arm_counts_arr[0]
            sparse_8_first_counts[0] += arm_counts_first_third[0]
            sparse_8_second_counts[0] += arm_counts_second_third[0]
            sparse_8_third_counts[0] += arm_counts_third_third[0]
            sparse_8_total_counts[1] += arm_counts_arr[1]
            sparse_8_first_counts[1] += arm_counts_first_third[1]
            sparse_8_second_counts[1] += arm_counts_second_third[1]
            sparse_8_third_counts[1] += arm_counts_third_third[1]
            
        #Plentiful environment trials
        elif "A4-B2" in file and "16" in file:
            plentiful_16_total_counts[0] += arm_counts_arr[0]
            plentiful_16_first_counts[0] += arm_counts_first_third[0]
            plentiful_16_second_counts[0] += arm_counts_second_third[0]
            plentiful_16_third_counts[0] += arm_counts_third_third[0]
            plentiful_16_total_counts[1] += arm_counts_arr[1]
            plentiful_16_first_counts[1] += arm_counts_first_third[1]
            plentiful_16_second_counts[1] += arm_counts_second_third[1]
            plentiful_16_third_counts[1] += arm_counts_third_third[1]
        else:
            plentiful_8_total_counts[0] += arm_counts_arr[0]
            plentiful_8_first_counts[0] += arm_counts_first_third[0]
            plentiful_8_second_counts[0] += arm_counts_second_third[0]
            plentiful_8_third_counts[0] += arm_counts_third_third[0]
            plentiful_8_total_counts[1] += arm_counts_arr[1]
            plentiful_8_first_counts[1] += arm_counts_first_third[1]
            plentiful_8_second_counts[1] += arm_counts_second_third[1]
            plentiful_8_third_counts[1] += arm_counts_third_third[1]

    #Average across participants and write to file
    #Divide by 10 because we have 10 participants
    average_neutral_8_total_1_counts = neutral_8_total_counts[0] / 10
    average_neutral_16_total_1_counts = neutral_16_total_counts[0] / 10
    average_sparse_8_total_1_counts = sparse_8_total_counts[0] / 10
    average_sparse_16_total_1_counts = sparse_16_total_counts[0] / 10
    average_plentiful_8_total_1_counts = plentiful_8_total_counts[0] / 10
    average_plentiful_16_total_1_counts = plentiful_16_total_counts[0] / 10
    average_neutral_8_total_2_counts = neutral_8_total_counts[1] / 10
    average_neutral_16_total_2_counts = neutral_16_total_counts[1] / 10
    average_sparse_8_total_2_counts = sparse_8_total_counts[1] / 10
    average_sparse_16_total_2_counts = sparse_16_total_counts[1] / 10
    average_plentiful_8_total_2_counts = plentiful_8_total_counts[1] / 10
    average_plentiful_16_total_2_counts = plentiful_16_total_counts[1] / 10

    average_neutral_8_first_1_counts = neutral_8_first_counts[0] / 10
    average_neutral_16_first_1_counts = neutral_16_first_counts[0] / 10
    average_sparse_8_first_1_counts = sparse_8_first_counts[0] / 10
    average_sparse_16_first_1_counts = sparse_16_first_counts[0] / 10
    average_plentiful_8_first_1_counts = plentiful_8_first_counts[0] / 10
    average_plentiful_16_first_1_counts = plentiful_16_first_counts[0] / 10
    average_neutral_8_first_2_counts = neutral_8_first_counts[1] / 10
    average_neutral_16_first_2_counts = neutral_16_first_counts[1] / 10
    average_sparse_8_first_2_counts = sparse_8_first_counts[1] / 10
    average_sparse_16_first_2_counts = sparse_16_first_counts[1] / 10
    average_plentiful_8_first_2_counts = plentiful_8_first_counts[1] / 10
    average_plentiful_16_first_2_counts = plentiful_16_first_counts[1] / 10

    average_neutral_8_second_1_counts = neutral_8_second_counts[0] / 10
    average_neutral_16_second_1_counts = neutral_16_second_counts[0] / 10
    average_sparse_8_second_1_counts = sparse_8_second_counts[0] / 10
    average_sparse_16_second_1_counts = sparse_16_second_counts[0] / 10
    average_plentiful_8_second_1_counts = plentiful_8_second_counts[0] / 10
    average_plentiful_16_second_1_counts = plentiful_16_second_counts[0] / 10
    average_neutral_8_second_2_counts = neutral_8_second_counts[1] / 10
    average_neutral_16_second_2_counts = neutral_16_second_counts[1] / 10
    average_sparse_8_second_2_counts = sparse_8_second_counts[1] / 10
    average_sparse_16_second_2_counts = sparse_16_second_counts[1] / 10
    average_plentiful_8_second_2_counts = plentiful_8_second_counts[1] / 10
    average_plentiful_16_second_2_counts = plentiful_16_second_counts[1] / 10

    average_neutral_8_third_1_counts = neutral_8_third_counts[0] / 10
    average_neutral_16_third_1_counts = neutral_16_third_counts[0] / 10
    average_sparse_8_third_1_counts = sparse_8_third_counts[0] / 10
    average_sparse_16_third_1_counts = sparse_16_third_counts[0] / 10
    average_plentiful_8_third_1_counts = plentiful_8_third_counts[0] / 10
    average_plentiful_16_third_1_counts = plentiful_16_third_counts[0] / 10
    average_neutral_8_third_2_counts = neutral_8_third_counts[1] / 10
    average_neutral_16_third_2_counts = neutral_16_third_counts[1] / 10
    average_sparse_8_third_2_counts = sparse_8_third_counts[1] / 10
    average_sparse_16_third_2_counts = sparse_16_third_counts[1] / 10
    average_plentiful_8_third_2_counts = plentiful_8_third_counts[1] / 10
    average_plentiful_16_third_2_counts = plentiful_16_third_counts[1] / 10

    #Write arm choice averages to file
    
    averages_file.write('Average Number of Times Arm 1 Was Chosen Overall' + "\n"+ "\n")
    averages_file.write("Neutral8 total counts: " + str(average_neutral_8_total_1_counts) +"\n")
    averages_file.write("Neutral8 arm 1 total percentage: " + str(average_neutral_8_total_1_counts/(average_neutral_8_total_1_counts + average_neutral_8_total_2_counts))+"\n")
    averages_file.write("Neutral 16 total counts:  " + str(average_neutral_16_total_1_counts) +"\n")
    averages_file.write("Neutral 16 arm 1 total percentage: " + str(average_neutral_16_total_1_counts/(average_neutral_16_total_1_counts + average_neutral_16_total_2_counts))+"\n")
    averages_file.write("Sparse 8 total counts: " + str(average_sparse_8_total_1_counts) +"\n")
    averages_file.write("Sparse 8 arm 1 total percentage: " + str(average_sparse_8_total_1_counts/(average_sparse_8_total_1_counts + average_sparse_8_total_2_counts))+"\n")
    averages_file.write("Sparse 16 total counts: " + str(average_sparse_16_total_1_counts) +"\n")
    averages_file.write("Sparse 16 arm 1 total percentage: " + str(average_sparse_16_total_1_counts/(average_sparse_16_total_1_counts + average_sparse_16_total_2_counts))+"\n")
    averages_file.write("Plentiful 8 total counts: " + str(average_plentiful_8_total_1_counts) +"\n")
    averages_file.write("Plentiful 8 arm 1 total percentage: " + str(average_plentiful_8_total_1_counts/(average_plentiful_8_total_1_counts + average_plentiful_8_total_2_counts))+"\n")
    averages_file.write("Plentiful 16 total counts:  " + str(average_plentiful_16_total_1_counts) +"\n"+"\n")
    averages_file.write("Plentiful 16 arm 1 total percentage: " + str(average_plentiful_16_total_1_counts/(average_plentiful_16_total_1_counts + average_plentiful_16_total_2_counts))+"\n")

    averages_file.write('Average Number of Times Arm 2 Was Chosen Overall' + "\n"+ "\n")
    averages_file.write("Neutral 8 total counts: " + str(average_neutral_8_total_2_counts) +"\n")
    averages_file.write("Neutral 16 total counts:  " + str(average_neutral_16_total_2_counts) +"\n")
    averages_file.write("Sparse 8 total counts: " + str(average_sparse_8_total_2_counts) +"\n")
    averages_file.write("Sparse 16 total counts: " + str(average_sparse_16_total_2_counts) +"\n")
    averages_file.write("Plentiful 8 total counts: " + str(average_plentiful_8_total_2_counts) +"\n")
    averages_file.write("Plentiful 16 total counts:  " + str(average_plentiful_16_total_2_counts) +"\n"+"\n")

    averages_file.write('Average Number of Times Arm 1 Was Chosen in the First Third of Each Game' + "\n"+ "\n")
    averages_file.write("Neutral 8 first counts: " + str(average_neutral_8_first_1_counts) +"\n")
    averages_file.write("Neutral 8 arm 1 percentage first third: " + str(average_neutral_8_first_1_counts/(average_neutral_8_first_1_counts + average_neutral_8_first_2_counts))+"\n")
    averages_file.write("Neutral 16 first counts:  " + str(average_neutral_16_first_1_counts) +"\n")
    averages_file.write("Neutral 16 arm 1 percentage first third: " + str(average_neutral_16_first_1_counts/(average_neutral_16_first_1_counts + average_neutral_16_first_2_counts))+"\n")
    averages_file.write("Sparse 8 first counts: " + str(average_sparse_8_first_1_counts) +"\n")
    averages_file.write("Sparse 8 arm 1 percentage first third: " + str(average_sparse_8_first_1_counts/(average_sparse_8_first_1_counts + average_sparse_8_first_2_counts))+"\n")
    averages_file.write("Sparse 16 first counts: " + str(average_sparse_16_first_1_counts) +"\n")
    averages_file.write("Sparse 16 arm 1 percentage first third: " + str(average_sparse_16_first_1_counts/(average_sparse_16_first_1_counts + average_sparse_16_first_2_counts))+"\n")
    averages_file.write("Plentiful 8 first counts: " + str(average_plentiful_8_first_1_counts) +"\n")
    averages_file.write("Plentiful 8 arm 1 percentage first third: " + str(average_plentiful_8_first_1_counts/(average_plentiful_8_first_1_counts + average_plentiful_8_first_2_counts))+"\n")
    averages_file.write("Plentiful 16 first counts:  " + str(average_plentiful_16_first_1_counts) +"\n")
    averages_file.write("Plentiful 16 arm 1 percentage first third: " + str(average_plentiful_16_first_1_counts/(average_plentiful_16_first_1_counts + average_plentiful_16_first_2_counts))+"\n\n")

    averages_file.write('Average Number of Times Arm 2 Was Chosen in the First Third of Each Game' + "\n"+ "\n")
    averages_file.write("Neutral 8 first counts: " + str(average_neutral_8_first_2_counts) +"\n")
    averages_file.write("Neutral 16 first counts:  " + str(average_neutral_16_first_2_counts) +"\n")
    averages_file.write("Sparse 8 first counts: " + str(average_sparse_8_first_2_counts) +"\n")
    averages_file.write("Sparse 16 first counts: " + str(average_sparse_16_first_2_counts) +"\n")
    averages_file.write("Plentiful 8 first counts: " + str(average_plentiful_8_first_2_counts) +"\n")
    averages_file.write("Plentiful 16 first counts:  " + str(average_plentiful_16_first_2_counts) +"\n"+"\n")

    averages_file.write('Average Number of Times Arm 1 Was Chosen in the Second Third of Each Game' + "\n"+ "\n")
    averages_file.write("Neutral 8 second counts: " + str(average_neutral_8_second_1_counts) +"\n")
    averages_file.write("Neutral 8 arm 1 percentage second third: " + str(average_neutral_8_second_1_counts/(average_neutral_8_second_1_counts + average_neutral_8_second_2_counts))+"\n")
    averages_file.write("Neutral 16 second counts:  " + str(average_neutral_16_second_1_counts) +"\n")
    averages_file.write("Neutral 16 arm 1 percentage second third: " + str(average_neutral_16_second_1_counts/(average_neutral_16_second_1_counts + average_neutral_16_second_2_counts))+"\n")
    averages_file.write("Sparse 8 second counts: " + str(average_sparse_8_second_1_counts) +"\n")
    averages_file.write("Sparse 8 arm 1 percentage second third: " + str(average_sparse_8_second_1_counts/(average_sparse_8_second_1_counts + average_sparse_8_second_2_counts))+"\n")
    averages_file.write("Sparse 16 second counts: " + str(average_sparse_16_second_1_counts) +"\n")
    averages_file.write("Sparse 16 arm 1 percentage second third: " + str(average_sparse_16_second_1_counts/(average_sparse_16_second_1_counts + average_sparse_16_second_2_counts))+"\n")
    averages_file.write("Plentiful 8 second counts: " + str(average_plentiful_8_second_1_counts) +"\n")
    averages_file.write("Plentiful 8 arm 1 percentage second third: " + str(average_plentiful_8_second_1_counts/(average_plentiful_8_second_1_counts + average_plentiful_8_second_2_counts))+"\n")
    averages_file.write("Plentiful 16 second counts:  " + str(average_plentiful_16_second_1_counts) +"\n")
    averages_file.write("Plentiful 16 arm 1 percentage second third: " + str(average_plentiful_16_second_1_counts/(average_plentiful_16_second_1_counts + average_plentiful_16_second_2_counts))+"\n"+"\n")

    averages_file.write('Average Number of Times Arm 2 Was Chosen in the Second Third of Each Game' + "\n"+ "\n")
    averages_file.write("Neutral 8 second counts: " + str(average_neutral_8_second_2_counts) +"\n")
    averages_file.write("Neutral 16 second counts:  " + str(average_neutral_16_second_2_counts) +"\n")
    averages_file.write("Sparse 8 second counts: " + str(average_sparse_8_second_2_counts) +"\n")
    averages_file.write("Sparse 16 second counts: " + str(average_sparse_16_second_2_counts) +"\n")
    averages_file.write("Plentiful 8 second counts: " + str(average_plentiful_8_second_2_counts) +"\n")
    averages_file.write("Plentiful 16 second counts:  " + str(average_plentiful_16_second_2_counts) +"\n"+"\n")

    averages_file.write('Average Number of Times Arm 1 Was Chosen in the Last Third of Each Game' + "\n"+ "\n")
    averages_file.write("Neutral 8 third counts: " + str(average_neutral_8_third_1_counts) +"\n")
    averages_file.write("Neutral 8 arm 1 percentage last third: " + str(average_neutral_8_third_1_counts/(average_neutral_8_third_1_counts + average_neutral_8_third_2_counts))+"\n")
    averages_file.write("Neutral 16 third counts:  " + str(average_neutral_16_third_1_counts) +"\n")
    averages_file.write("Neutral 16 arm 1 percentage last third: " + str(average_neutral_16_third_1_counts/(average_neutral_16_third_1_counts + average_neutral_16_third_2_counts))+"\n")
    averages_file.write("Sparse 8 third counts: " + str(average_sparse_8_third_1_counts) +"\n")
    averages_file.write("Sparse 8 arm 1 percentage last third: " + str(average_sparse_8_third_1_counts/(average_sparse_8_third_1_counts + average_sparse_8_third_2_counts))+"\n")
    averages_file.write("Sparse 16 third counts: " + str(average_sparse_16_third_1_counts) +"\n")
    averages_file.write("Sparse 16 arm 1 percentage last third: " + str(average_sparse_16_third_1_counts/(average_sparse_16_third_1_counts + average_sparse_16_third_2_counts))+"\n")
    averages_file.write("Plentiful 8 third counts: " + str(average_plentiful_8_third_1_counts) +"\n")
    averages_file.write("Plentiful 8 arm 1 percentage last third: " + str(average_plentiful_8_third_1_counts/(average_plentiful_8_third_1_counts + average_plentiful_8_third_2_counts))+"\n")
    averages_file.write("Plentiful 16 third counts:  " + str(average_plentiful_16_third_1_counts) +"\n")
    averages_file.write("Plentiful 16 arm 1 percentage last third: " + str(average_plentiful_16_third_1_counts/(average_plentiful_16_third_1_counts + average_plentiful_16_third_2_counts))+"\n"+"\n")

    averages_file.write('Average Number of Times Arm 2 Was Chosen in the Last Third of Each Game' + "\n"+ "\n")
    averages_file.write("Neutral 8 third counts: " + str(average_neutral_8_third_2_counts) +"\n")
    averages_file.write("Neutral 16 third counts:  " + str(average_neutral_16_third_2_counts) +"\n")
    averages_file.write("Sparse 8 third counts: " + str(average_sparse_8_third_2_counts) +"\n")
    averages_file.write("Sparse 16 third counts: " + str(average_sparse_16_third_2_counts) +"\n")
    averages_file.write("Plentiful 8 third counts: " + str(average_plentiful_8_third_2_counts) +"\n")
    averages_file.write("Plentiful 16 third counts:  " + str(average_plentiful_16_third_2_counts) +"\n"+"\n")
    
def proof_of_concept_6_arm_problems():
    '''
    Proof of concept that simulates our heuristic models on a 6-armed bandit problem.

    Each model plays 500 50-trial games in a "neutral" environment (arm probabilities drawn from Beta(1,1)) of a 6-armed bandit problem.
    
    gamma is set to .9
    tau and pi are set to 25
    epsilon is set to .9
    '''

    #Generate data by running simulations
    epsilon_heuristics.epsilon_heuristics_simulation(500, 50, "./6ArmData/EpsilonDecreasing/epsilonDecreasingChoices.csv", "./6ArmData/EpsilonDecreasing/epsilonDecreasingResults.csv", 6, .9, True, "n")

    epsilon_heuristics.epsilon_heuristics_simulation(500, 50, "./6ArmData/EpsilonGreedy/epsilonGreedyChoices.csv", "./6ArmData/EpsilonGreedy/epsilonGreedyResults.csv", 6, .9, False, "n")
    
    pi_first.run_pi_first_simulation(500, 50, "./6ArmData/PiFirst/piFirstChoices.csv", "./6ArmData/PiFirst/piFirstResults.csv", 6, 25, .9, "n")

    tau_switch.run_tau_switch_simulation(500, 50, "./6ArmData/TauSwitch/tauSwitchChoices.csv", "./6ArmData/TauSwitch/tauSwitchResults.csv", 6, 25, .9, "n")

    win_stay_lose_shift.run_win_stay_simulation(500, 50, "./6ArmData/WSLS/WSLSChoices.csv", "./6ArmData/WSLS/WSLSResults.csv", 6, .9, "n")

    #Find win rate averages                                    

    averages_file = open("./6ArmData/Averages/win_rate_averages.txt", "w")

    #Epsilon-Decreasing                                  
    epsilon_decreasing_file = os.fsdecode("./6ArmData/EpsilonDecreasing/epsilonDecreasingResults.csv")
    epsilon_decreasing_csv = np.genfromtxt(epsilon_decreasing_file, delimiter=',') 
    epsilon_decreasing_csv = epsilon_decreasing_csv[1:]
    ed_average_wins = average_wins_per_person(epsilon_decreasing_csv)  
    print("ed average wins", ed_average_wins)
    averages_file.write("Epsilon Decreasing" + "\n")
    averages_file.write("Average Win Rate: " + str(ed_average_wins) + "\n\n")

    #Epsilon-Greedy                                  
    epsilon_greedy_file = os.fsdecode("./6ArmData/EpsilonGreedy/epsilonGreedyResults.csv")
    epsilon_greedy_csv = np.genfromtxt(epsilon_greedy_file, delimiter=',') 
    epsilon_greedy_csv = epsilon_greedy_csv[1:]
    eg_average_wins = average_wins_per_person(epsilon_greedy_csv)  
    averages_file.write("Epsilon Greedy" + "\n")
    averages_file.write("Average Win Rate: " + str(eg_average_wins) + "\n\n")

    #Pi-First                                  
    pi_first_file = os.fsdecode("./6ArmData/PiFirst/piFirstResults.csv")
    pi_first_csv = np.genfromtxt(pi_first_file, delimiter=',') 
    pi_first_csv = pi_first_csv[1:]
    pf_average_wins = average_wins_per_person(pi_first_csv)  
    averages_file.write("Pi First" + "\n")
    averages_file.write("Average Win Rate: " + str(pf_average_wins) + "\n\n")

    #Tau-Switch                                   
    tau_switch_file = os.fsdecode("./6ArmData/TauSwitch/tauSwitchResults.csv")
    tau_switch_csv = np.genfromtxt(tau_switch_file, delimiter=',') 
    tau_switch_csv = tau_switch_csv[1:]
    ts_average_wins = average_wins_per_person(tau_switch_csv)  
    averages_file.write("Tau Switch" + "\n")
    averages_file.write("Average Win Rate: " + str(ts_average_wins) + "\n\n")

    #Win-stay, lose-shift                                  
    wsls_file = os.fsdecode("./6ArmData/WSLS/WSLSResults.csv")
    wsls_csv = np.genfromtxt(wsls_file, delimiter=',') 
    wsls_csv = wsls_csv[1:]
    wsls_average_wins = average_wins_per_person(wsls_csv)  
    averages_file.write("Win Stay Lose Shift" + "\n")
    averages_file.write("Average Win Rate: " + str(wsls_average_wins) + "\n\n") 

#analyze_all_models()
#analyze_Lee_data()
#proof_of_concept_6_arm_problems()
